# movie_recommendation_system.py
import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

# Load datasets
movies_file = "movies.csv"  # Replace with the actual path to your movies dataset
ratings_file = "ratings.csv"  # Replace with the actual path to your ratings dataset

# Example: movies.csv
# MovieID,Title,Genres
# 1,Toy Story (1995),Adventure|Animation|Children|Comedy|Fantasy
# 2,Jumanji (1995),Adventure|Children|Fantasy
# 3,Grumpier Old Men (1995),Comedy|Romance

# Example: ratings.csv
# UserID,MovieID,Rating
# 1,1,4.0
# 1,2,4.0
# 1,3,4.0

# Load data
movies_df = pd.read_csv(movies_file)
ratings_df = pd.read_csv(ratings_file)

# Preprocess genres for TF-IDF
tfidf = TfidfVectorizer(stop_words="english")
tfidf_matrix = tfidf.fit_transform(movies_df["Genres"])

# Compute cosine similarity between all movies
cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

# Helper function to get movie recommendations
def recommend_movies(movie_title, num_recommendations=5):
    # Check if the movie exists in the dataset
    if movie_title not in movies_df["Title"].values:
        return f"Movie '{movie_title}' not found in the dataset."

    # Get the index of the movie that matches the title
    idx = movies_df[movies_df["Title"] == movie_title].index[0]

    # Get similarity scores for all movies
    sim_scores = list(enumerate(cosine_sim[idx]))

    # Sort movies by similarity scores
    sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)

    # Get the top recommended movies (excluding the input movie)
    sim_scores = sim_scores[1:num_recommendations + 1]

    # Get movie indices
    movie_indices = [i[0] for i in sim_scores]

    # Return top recommended movies
    return movies_df["Title"].iloc[movie_indices].tolist()

# Example usage
if __name__ == "__main__":
    # Replace 'Toy Story (1995)' with a movie title from your dataset
    movie_to_search = "Toy Story (1995)"
    recommendations = recommend_movies(movie_to_search, num_recommendations=5)
    print(f"Recommendations for '{movie_to_search}':")
    if isinstance(recommendations, list):
        for movie in recommendations:
            print(movie)
    else:
        print(recommendations)
